name: Build Rust Crate for Termux and Create .deb Packages

on:
  workflow_dispatch:
    inputs:
      crate:
        description: 'Crate name from crates.io OR Git repository URL'
        required: true
      ref:
        description: 'Git reference (branch, tag, commit)'
        default: 'main'
        required: false
      release_tag:
        description: 'Tag to create in release (e.g. v1.0.0)'
        required: true
      features:
        description: 'Cargo features (space-separated)'
        default: ''
        required: false
      no_default_features:
        description: 'Disable default features?'
        type: boolean
        default: false
      all_features:
        description: 'Enable all features?'
        type: boolean
        default: false

jobs:
  build-openssl:
    uses: ckysmrn/termux-crate-builder/.github/workflows/build-openssl.yaml@main
    with:
      version: '1.1.1w'
  build:
    runs-on: ubuntu-latest
    needs: [build-openssl]
    strategy:
      matrix:
        arch: [armeabi-v7a, arm64-v8a, x86, x86_64]
        include:
          - arch: arm64-v8a
            abi: arm64-v8a
            target: aarch64-linux-android
          - arch: armeabi-v7a
            abi: armeabi-v7a
            target: armv7-linux-androideabi
          - arch: x86_64
            abi: x86_64
            target: x86_64-linux-android
          - arch: x86
            abi: x86
            target: i686-linux-android
    steps:
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y curl unzip tar build-essential gcc pkg-config fakeroot libssl-dev libgpg-error-dev
          cargo install cargo-ndk
          #cargo install cargo-edit
      - name: Prepare project
        run: |
          mkdir -p external-crate
          if [[ "${{ github.event.inputs.crate }}" =~ ^https?:// ]]; then
            echo "Detected Git Repository"
            git clone ${{ github.event.inputs.crate }} external-crate
          else
            echo "Detected crates.io crate"
            cargo new wrapper --bin
            cd wrapper
            cargo add ${{ github.event.inputs.crate }}
            echo "BIN_NAME=${{ github.event.inputs.crate }}" >> $GITHUB_ENV
            cd ..
            mv wrapper external-crate
          fi
          dpkg -L libssl-dev
          echo "-----------------"
          dpkg -L libgpg-error-dev
          echo "-----------------"
          tree -a
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}
      - name: Add Android target
        run: rustup target add ${{ matrix.target }}
      #- name: Setup Android NDK
      #  id: setup-ndk
      #  uses: nttld/setup-ndk@v1
      #  with:
      #    ndk-version: r26d
      #    local-cache: false
      #    add-to-path: true
        #run: |
        #  curl -L https://dl.google.com/android/repository/android-ndk-r26d-linux.zip -o ndk.zip
        #  unzip -q ndk.zip
        #  echo "ANDROID_NDK=$(pwd)/android-ndk-r26d" >> $GITHUB_ENV
      - name: Download all OpenSSL build artifacts
        uses: actions/download-artifact@v4
        with:
          path: openssl/build
      - name: Set PKG_CONFIG_PATH
        run: echo "PKG_CONFIG_PATH=${GITHUB_WORKSPACE}/openssl/build/${{ matrix.arch }}/lib/pkgconfig" >> $GITHUB_ENV
      - name: Debug pkg-config
        run: |
          echo $PKG_CONFIG_PATH
          ls $PKG_CONFIG_PATH
          pkg-config --libs --cflags openssl || true
      - name: Build with cargo-ndk
        working-directory: ./external-crate
        env:
          OPENSSL_DIR: ${{ github.workspace }}/openssl/build/${{ matrix.abi }}
          #OPENSSL_INCLUDE_DIR: /usr/include/
          #OPENSSL_NO_VENDOR: 1
          OPENSSL_STATIC: "1"
          RUST_BACKTRACE: full
        #  ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          echo $ANDROID_NDK_HOME
          echo $PWD
          #echo "OPENSSL_DIR=/usr/include/openssl" >> $GITHUB_ENV
          echo "OPENSSL_DIR=$OPENSSL_DIR"
          #sudo ln -s /usr/include/x86_64-linux-gnu/openssl/opensslconf.h /usr/include/openssl/opensslconf.h
          #sudo ln -s /usr/include/x86_64-linux-gnu/openssl/configuration.h /usr/include/openssl/configuration.h
          source <(cargo ndk-env)
          ls -lah
          echo "----"
          ls -lah ./*
          if [[ -f "Cargo.toml" ]]; then
            echo "Content of Cargo.toml"
            cat Cargo.toml
          fi
          if [[ -f "wrapper/Cargo.toml" ]]; then
            echo "Content of wrapper/Cargo.toml"
            cat wrapper/Cargo.toml
          fi
          ARGS="build --release"
          if [ "${{ github.event.inputs.no_default_features }}" = "true" ]; then
            ARGS="$ARGS --no-default-features"
          fi
          if [ "${{ github.event.inputs.all_features }}" = "true" ]; then
            ARGS="$ARGS --all-features"
          fi
          if [ -n "${{ github.event.inputs.features }}" ]; then
            ARGS="$ARGS --features '${{ github.event.inputs.features }}'"
          fi
          echo "Building with: cargo ndk -t ${{ matrix.target }} -o ./target/ndk-build $ARGS"
          echo "Installing target: ${{ matrix.target }}"
          rustup target install ${{ matrix.target }}
          eval cargo ndk -t ${{ matrix.target }} -o ./target/ndk-build $ARGS

      - name: Detect binary name (for crates.io)
        if: env.BIN_NAME != ''
        working-directory: ./external-crate
        run: echo "Detected BIN_NAME=${BIN_NAME}"

      - name: Auto detect binary name (for Git repo)
        if: env.BIN_NAME == ''
        working-directory: ./external-crate
        run: |
          BIN=$(basename $(find ./target/ndk-build/${{ matrix.target }}/release -maxdepth 1 -type f -executable | head -n1))
          echo "BIN_NAME=$BIN" >> $GITHUB_ENV
          echo "Detected BIN_NAME=$BIN"
      - name: Package .deb
        working-directory: ./external-crate
        run: |
          #BIN_NAME=$(basename $(find ./target/ndk-build/${{ matrix.target }}/release -maxdepth 1 -type f -executable))
          PACKAGE_NAME=${BIN_NAME}
          VERSION=${{ github.event.inputs.release_tag }}
          ARCH=$(echo "${{ matrix.target }}" | sed 's/-linux-android//; s/armv7/armhf/; s/aarch64/arm64/; s/x86_64/amd64/')

          mkdir -p deb-pkg/DEBIAN
          mkdir -p deb-pkg/data/data/com.termux/files/usr/bin
          cp ./target/ndk-build/${{ matrix.target }}/release/$BIN_NAME deb-pkg/data/data/com.termux/files/usr/bin/$BIN_NAME
          chmod 755 deb-pkg/data/data/com.termux/files/usr/bin/$BIN_NAME

          {
            echo 'CONTROL<<EOF'
            echo "Package: $PACKAGE_NAME"
            echo "Version: ${VERSION#v}"
            echo "Architecture: $ARCH"
            echo "Maintainer: GitHub Actions"
            echo "Description: Termux build of $PACKAGE_NAME for $ARCH"
            echo EOF
          } >> $GITHUB_ENV
          echo $CONTROL
          echo $CONTROL > deb-pkg/DEBIAN/control
          fakeroot dpkg-deb --build deb-pkg ${PACKAGE_NAME}_${VERSION#v}_${ARCH}.deb
          mkdir -p ../artifacts
          mv ${PACKAGE_NAME}_${VERSION#v}_${ARCH}.deb ../artifacts/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.target }}
          path: external-crate/artifacts/*.deb

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all .deb artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: "Termux release ${{ github.event.inputs.release_tag }}"
          files: dist/**/**/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
